AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Contains StageA StateMachine Definition

Parameters:
  pArtifactBucket:
    Description: Name of the artifactory bucket
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/S3/ArtifactsBucket
  pDatasetBucket:
    Description: The dataset bucket
    Type: String
  pStageBucket:
    Description: The stage bucket
    Type: String
  pApp:
    Description: Name of the application (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pOrg:
    Description: Name of the organization (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pTeamName:
    Description: Name of the team owning the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pPermissionsBoundaryManagedPolicy:
    Description: The permissions boundary IAM Managed policy for the team
    Type: String
  pPipeline:
    Description: The name of the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pEnv:
    Description: The name of the environment to deploy the dataset to
    Type: String
    Default: dev
    AllowedValues: [dev, test, prod]
  pKMSInfraKeyId:
    Description: The team infrastructure KMS key
    Type: String
  pKMSDataKeyId:
    Description: The team data KMS key
    Type: String
  pDatalakeLibLayer:
    Type: AWS::SSM::Parameter::Value<String>
    Description: The ARN of the latest Datalake Library Lambda Layer
  pPipLibLayer:
    Type: AWS::SSM::Parameter::Value<String>
    Description: The ARN of the latest Pip Library Lambda Layer
  pElasticSearchEnabled:
    Description: Boolean for wether ElasticSearch is enabled
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/ElasticSearch/Enabled
  pUpdateSubscriptionLambda:
    Description: ARN of the Lambda function used by the Custom Resource to update CloudWatch subscription filters
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/Lambda/UpdateCloudWatchSubscriptionFilterFunctionArn
  pKibanaFunction:
    Description: ARN of the Lambda function that collates logs
    Type: AWS::SSM::Parameter::Value<String>
    Default: /SDLF/Lambda/KibanaLambdaArn
  pStatesExecutionRole:
    Type: AWS::SSM::Parameter::Value<String>
    Description: The ARN of the States Execution Role
  pSNSTopic:
    Description: The team SNS topic
    Type: String

Conditions:
  DeployElasticSearch: !Equals [!Ref pElasticSearchEnabled, "true"]

Globals:
  Function:
    Runtime: python3.7
    Handler: lambda_function.lambda_handler
    Layers:
      - !Ref pDatalakeLibLayer
    KmsKeyArn: !Ref pKMSInfraKeyId

Resources:
  ######## IAM #########
  # Common policy
  rLambdaCommonPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub sdlf-${pTeamName}-${pPipeline}-common-a
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
          - Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !Ref pKMSInfraKeyId

  rRoleLambdaExecutionStep1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-${pPipeline}-dependent-status
      PermissionsBoundary: !Ref pPermissionsBoundaryManagedPolicy
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /state-machine/

  rRoleLambdaExecutionStep2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub sdlf-${pTeamName}-${pPipeline}-process
      PermissionsBoundary: !Ref pPermissionsBoundaryManagedPolicy
      ManagedPolicyArns:
        - !Ref rLambdaCommonPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /state-machine/
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-${pPipeline}-process
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${pDatasetBucket}
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${pDatasetBucket}/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pDatasetBucket}/stage/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pDatasetBucket}/pre-stage/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pDatasetBucket}/post-stage/${pTeamName}/*
                  - !Sub arn:aws:s3:::${pDatasetBucket}/analytics/${pTeamName}/*
              - Effect: Allow
                Action:
                  - glue:GetJobRun
                  - glue:StartJobRun
                Resource:
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:job/sdlf-${pTeamName}-*

  rLambdaStep1:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/stage-a-dependent-status/src
      FunctionName: !Sub sdlf-${pTeamName}-${pPipeline}-dependent-status-a
      Description: Checks if dependent datasets finished processing
      MemorySize: 256
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionStep1.Arn

  rLambdaStep2:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/stage-a-process/src
      FunctionName: !Sub sdlf-${pTeamName}-${pPipeline}-process-a
      Description: Processing pipeline
      MemorySize: 1536
      Timeout: 900
      Role: !GetAtt rRoleLambdaExecutionStep2.Arn

  rLambdaJobCheckStep:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/stage-a-check-job/src
      FunctionName: !Sub sdlf-${pTeamName}-${pPipeline}-checkjob-a
      Description: Checks if job has finished (success/failure)
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt rRoleLambdaExecutionStep2.Arn

  ######## CLOUDWATCH #########
  rLambdaStep1LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaStep1}

  rUpdateSubscriptionFilterStep1:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaStep1LogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  rLambdaJobCheckStepLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaJobCheckStep}

  rUpdateSubscriptionFilterJobCheckStep:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaJobCheckStepLogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  rLambdaStep2LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaStep2}

  rUpdateSubscriptionFilterStep2:
    Type: Custom::UpdateSubscriptionFilter
    Condition: DeployElasticSearch
    Version: 0.1
    Properties:
      ServiceToken: !Ref pUpdateSubscriptionLambda
      LogGroupName: !Ref rLambdaStep2LogGroup
      DestinationArn: !Ref pKibanaFunction
      FilterPattern: "[log_type, log_timestamp, log_id, log_message]"

  ######## STEP FUNCTION #########
  rStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub sdlf-${pTeamName}-${pPipeline}-sm-a
      DefinitionUri: ./state-machine/stage-a.asl.json
      DefinitionSubstitutions:
        lStep1: !GetAtt rLambdaStep1.Arn
        lStep2: !GetAtt rLambdaStep2.Arn
        lstep3: !GetAtt rLambdaJobCheckStep.Arn        
      Role: !Ref pStatesExecutionRole
